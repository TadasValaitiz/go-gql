// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type OrgMembership struct {
	Role         string        `json:"role"`
	User         *User         `json:"user"`
	Organization *Organization `json:"organization"`
}

type Organization struct {
	Tildaid        string           `json:"tildaid"`
	Alias          *string          `json:"alias,omitempty"`
	Name           string           `json:"name"`
	URL            *string          `json:"url,omitempty"`
	Country        *string          `json:"country,omitempty"`
	State          *string          `json:"state,omitempty"`
	City           *string          `json:"city,omitempty"`
	PostalCode     *string          `json:"postalCode,omitempty"`
	Email          *string          `json:"email,omitempty"`
	ContactPhone   *string          `json:"contactPhone,omitempty"`
	Bio            *string          `json:"bio,omitempty"`
	OrgType        OrgType          `json:"orgType"`
	OrgMemberships []*OrgMembership `json:"orgMemberships"`
}

type OrganizationUpdate struct {
	Name       *string `json:"name,omitempty"`
	Bio        *string `json:"bio,omitempty"`
	Email      *string `json:"email,omitempty"`
	Alias      *string `json:"alias,omitempty"`
	URL        *string `json:"url,omitempty"`
	Country    *string `json:"country,omitempty"`
	State      *string `json:"state,omitempty"`
	City       *string `json:"city,omitempty"`
	PostalCode *string `json:"postalCode,omitempty"`
}

type Query struct {
}

type Site struct {
	Tildaid            string              `json:"tildaid"`
	Name               string              `json:"name"`
	Address            string              `json:"address"`
	Capacity           *string             `json:"capacity,omitempty"`
	City               string              `json:"city"`
	ContactEmail       *string             `json:"contactEmail,omitempty"`
	ContactPhone       *string             `json:"contactPhone,omitempty"`
	Country            string              `json:"country"`
	CreatedAt          float64             `json:"createdAt"`
	DaysOfWeek         *string             `json:"daysOfWeek,omitempty"`
	Description        *string             `json:"description,omitempty"`
	GoogleMapURL       *string             `json:"googleMapUrl,omitempty"`
	HoldBitmap         *int                `json:"holdBitmap,omitempty"`
	HolidaysList       *string             `json:"holidaysList,omitempty"`
	Latitude           *float64            `json:"latitude,omitempty"`
	Longitude          *float64            `json:"longitude,omitempty"`
	OrgID              string              `json:"orgId"`
	OutstandingQueries *int                `json:"outstandingQueries,omitempty"`
	PostalCode         string              `json:"postalCode"`
	PrimaryLocationID  *string             `json:"primaryLocationId,omitempty"`
	SiteLogo           *string             `json:"siteLogo,omitempty"`
	SmoID              *string             `json:"smoId,omitempty"`
	State              string              `json:"state"`
	Status             string              `json:"status"`
	StreetAddress      string              `json:"streetAddress"`
	StudiesSummary     []*StudyStatusCount `json:"studiesSummary,omitempty"`
	SubjectsCount      *int                `json:"subjectsCount,omitempty"`
	Suite              *string             `json:"suite,omitempty"`
	TimeZone           *string             `json:"timeZone,omitempty"`
	TwilioNumber       *string             `json:"twilioNumber,omitempty"`
	UpdatedAt          float64             `json:"updatedAt"`
	Studies            []*Study            `json:"studies"`
}

type Study struct {
	Tildaid         string `json:"tildaid"`
	Name            string `json:"name"`
	Status          string `json:"status"`
	Numapproved     int    `json:"numapproved"`
	Numparticipants int    `json:"numparticipants"`
	Numpatients     int    `json:"numpatients"`
	Numpending      int    `json:"numpending"`
	Numrejected     int    `json:"numrejected"`
}

type StudyStatusCount struct {
	Status string `json:"status"`
	Count  int    `json:"count"`
}

type User struct {
	Tildaid        string           `json:"tildaid"`
	Onboarded      bool             `json:"onboarded"`
	Username       string           `json:"username"`
	Name           *string          `json:"name,omitempty"`
	Email          string           `json:"email"`
	Contact        *string          `json:"contact,omitempty"`
	Bio            *string          `json:"bio,omitempty"`
	Capabilities   *string          `json:"capabilities,omitempty"`
	Location       *string          `json:"location,omitempty"`
	OrgMemberships []*OrgMembership `json:"orgMemberships"`
}

type OrgType string

const (
	OrgTypeSmo     OrgType = "SMO"
	OrgTypeCro     OrgType = "CRO"
	OrgTypeSponsor OrgType = "Sponsor"
)

var AllOrgType = []OrgType{
	OrgTypeSmo,
	OrgTypeCro,
	OrgTypeSponsor,
}

func (e OrgType) IsValid() bool {
	switch e {
	case OrgTypeSmo, OrgTypeCro, OrgTypeSponsor:
		return true
	}
	return false
}

func (e OrgType) String() string {
	return string(e)
}

func (e *OrgType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrgType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrgType", str)
	}
	return nil
}

func (e OrgType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
