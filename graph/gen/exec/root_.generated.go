// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package exec

import (
	"bytes"
	"context"
	"errors"
	"go-gql-demo/graph/gen/model"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		UpdateOrganization func(childComplexity int, id string, value model.OrganizationUpdate) int
	}

	OrgMembership struct {
		Organization func(childComplexity int) int
		Role         func(childComplexity int) int
		User         func(childComplexity int) int
	}

	Organization struct {
		Alias          func(childComplexity int) int
		Bio            func(childComplexity int) int
		City           func(childComplexity int) int
		ContactPhone   func(childComplexity int) int
		Country        func(childComplexity int) int
		Email          func(childComplexity int) int
		Name           func(childComplexity int) int
		OrgMemberships func(childComplexity int) int
		OrgType        func(childComplexity int) int
		PostalCode     func(childComplexity int) int
		State          func(childComplexity int) int
		Tildaid        func(childComplexity int) int
		URL            func(childComplexity int) int
	}

	Query struct {
		MyProfile     func(childComplexity int) int
		Organization  func(childComplexity int, id string) int
		Organizations func(childComplexity int) int
		Sites         func(childComplexity int) int
		Studies       func(childComplexity int) int
		Study         func(childComplexity int, id string) int
	}

	Site struct {
		Address            func(childComplexity int) int
		Capacity           func(childComplexity int) int
		City               func(childComplexity int) int
		ContactEmail       func(childComplexity int) int
		ContactPhone       func(childComplexity int) int
		Country            func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DaysOfWeek         func(childComplexity int) int
		Description        func(childComplexity int) int
		GoogleMapURL       func(childComplexity int) int
		HoldBitmap         func(childComplexity int) int
		HolidaysList       func(childComplexity int) int
		Latitude           func(childComplexity int) int
		Longitude          func(childComplexity int) int
		Name               func(childComplexity int) int
		OrgID              func(childComplexity int) int
		OutstandingQueries func(childComplexity int) int
		PostalCode         func(childComplexity int) int
		PrimaryLocationID  func(childComplexity int) int
		SiteLogo           func(childComplexity int) int
		SmoID              func(childComplexity int) int
		State              func(childComplexity int) int
		Status             func(childComplexity int) int
		StreetAddress      func(childComplexity int) int
		Studies            func(childComplexity int) int
		StudiesSummary     func(childComplexity int) int
		SubjectsCount      func(childComplexity int) int
		Suite              func(childComplexity int) int
		Tildaid            func(childComplexity int) int
		TimeZone           func(childComplexity int) int
		TwilioNumber       func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	Study struct {
		Name            func(childComplexity int) int
		Numapproved     func(childComplexity int) int
		Numparticipants func(childComplexity int) int
		Numpatients     func(childComplexity int) int
		Numpending      func(childComplexity int) int
		Numrejected     func(childComplexity int) int
		Status          func(childComplexity int) int
		Tildaid         func(childComplexity int) int
	}

	StudyStatusCount struct {
		Count  func(childComplexity int) int
		Status func(childComplexity int) int
	}

	User struct {
		Bio            func(childComplexity int) int
		Capabilities   func(childComplexity int) int
		Contact        func(childComplexity int) int
		Email          func(childComplexity int) int
		Location       func(childComplexity int) int
		Name           func(childComplexity int) int
		Onboarded      func(childComplexity int) int
		OrgMemberships func(childComplexity int) int
		Tildaid        func(childComplexity int) int
		Username       func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["id"].(string), args["value"].(model.OrganizationUpdate)), true

	case "OrgMembership.organization":
		if e.complexity.OrgMembership.Organization == nil {
			break
		}

		return e.complexity.OrgMembership.Organization(childComplexity), true

	case "OrgMembership.role":
		if e.complexity.OrgMembership.Role == nil {
			break
		}

		return e.complexity.OrgMembership.Role(childComplexity), true

	case "OrgMembership.user":
		if e.complexity.OrgMembership.User == nil {
			break
		}

		return e.complexity.OrgMembership.User(childComplexity), true

	case "Organization.alias":
		if e.complexity.Organization.Alias == nil {
			break
		}

		return e.complexity.Organization.Alias(childComplexity), true

	case "Organization.bio":
		if e.complexity.Organization.Bio == nil {
			break
		}

		return e.complexity.Organization.Bio(childComplexity), true

	case "Organization.city":
		if e.complexity.Organization.City == nil {
			break
		}

		return e.complexity.Organization.City(childComplexity), true

	case "Organization.contactPhone":
		if e.complexity.Organization.ContactPhone == nil {
			break
		}

		return e.complexity.Organization.ContactPhone(childComplexity), true

	case "Organization.country":
		if e.complexity.Organization.Country == nil {
			break
		}

		return e.complexity.Organization.Country(childComplexity), true

	case "Organization.email":
		if e.complexity.Organization.Email == nil {
			break
		}

		return e.complexity.Organization.Email(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.orgMemberships":
		if e.complexity.Organization.OrgMemberships == nil {
			break
		}

		return e.complexity.Organization.OrgMemberships(childComplexity), true

	case "Organization.orgType":
		if e.complexity.Organization.OrgType == nil {
			break
		}

		return e.complexity.Organization.OrgType(childComplexity), true

	case "Organization.postalCode":
		if e.complexity.Organization.PostalCode == nil {
			break
		}

		return e.complexity.Organization.PostalCode(childComplexity), true

	case "Organization.state":
		if e.complexity.Organization.State == nil {
			break
		}

		return e.complexity.Organization.State(childComplexity), true

	case "Organization.tildaid":
		if e.complexity.Organization.Tildaid == nil {
			break
		}

		return e.complexity.Organization.Tildaid(childComplexity), true

	case "Organization.url":
		if e.complexity.Organization.URL == nil {
			break
		}

		return e.complexity.Organization.URL(childComplexity), true

	case "Query.myProfile":
		if e.complexity.Query.MyProfile == nil {
			break
		}

		return e.complexity.Query.MyProfile(childComplexity), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		args, err := ec.field_Query_organization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organization(childComplexity, args["id"].(string)), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		return e.complexity.Query.Organizations(childComplexity), true

	case "Query.sites":
		if e.complexity.Query.Sites == nil {
			break
		}

		return e.complexity.Query.Sites(childComplexity), true

	case "Query.studies":
		if e.complexity.Query.Studies == nil {
			break
		}

		return e.complexity.Query.Studies(childComplexity), true

	case "Query.study":
		if e.complexity.Query.Study == nil {
			break
		}

		args, err := ec.field_Query_study_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Study(childComplexity, args["id"].(string)), true

	case "Site.address":
		if e.complexity.Site.Address == nil {
			break
		}

		return e.complexity.Site.Address(childComplexity), true

	case "Site.capacity":
		if e.complexity.Site.Capacity == nil {
			break
		}

		return e.complexity.Site.Capacity(childComplexity), true

	case "Site.city":
		if e.complexity.Site.City == nil {
			break
		}

		return e.complexity.Site.City(childComplexity), true

	case "Site.contactEmail":
		if e.complexity.Site.ContactEmail == nil {
			break
		}

		return e.complexity.Site.ContactEmail(childComplexity), true

	case "Site.contactPhone":
		if e.complexity.Site.ContactPhone == nil {
			break
		}

		return e.complexity.Site.ContactPhone(childComplexity), true

	case "Site.country":
		if e.complexity.Site.Country == nil {
			break
		}

		return e.complexity.Site.Country(childComplexity), true

	case "Site.createdAt":
		if e.complexity.Site.CreatedAt == nil {
			break
		}

		return e.complexity.Site.CreatedAt(childComplexity), true

	case "Site.daysOfWeek":
		if e.complexity.Site.DaysOfWeek == nil {
			break
		}

		return e.complexity.Site.DaysOfWeek(childComplexity), true

	case "Site.description":
		if e.complexity.Site.Description == nil {
			break
		}

		return e.complexity.Site.Description(childComplexity), true

	case "Site.googleMapUrl":
		if e.complexity.Site.GoogleMapURL == nil {
			break
		}

		return e.complexity.Site.GoogleMapURL(childComplexity), true

	case "Site.holdBitmap":
		if e.complexity.Site.HoldBitmap == nil {
			break
		}

		return e.complexity.Site.HoldBitmap(childComplexity), true

	case "Site.holidaysList":
		if e.complexity.Site.HolidaysList == nil {
			break
		}

		return e.complexity.Site.HolidaysList(childComplexity), true

	case "Site.latitude":
		if e.complexity.Site.Latitude == nil {
			break
		}

		return e.complexity.Site.Latitude(childComplexity), true

	case "Site.longitude":
		if e.complexity.Site.Longitude == nil {
			break
		}

		return e.complexity.Site.Longitude(childComplexity), true

	case "Site.name":
		if e.complexity.Site.Name == nil {
			break
		}

		return e.complexity.Site.Name(childComplexity), true

	case "Site.orgId":
		if e.complexity.Site.OrgID == nil {
			break
		}

		return e.complexity.Site.OrgID(childComplexity), true

	case "Site.outstandingQueries":
		if e.complexity.Site.OutstandingQueries == nil {
			break
		}

		return e.complexity.Site.OutstandingQueries(childComplexity), true

	case "Site.postalCode":
		if e.complexity.Site.PostalCode == nil {
			break
		}

		return e.complexity.Site.PostalCode(childComplexity), true

	case "Site.primaryLocationId":
		if e.complexity.Site.PrimaryLocationID == nil {
			break
		}

		return e.complexity.Site.PrimaryLocationID(childComplexity), true

	case "Site.siteLogo":
		if e.complexity.Site.SiteLogo == nil {
			break
		}

		return e.complexity.Site.SiteLogo(childComplexity), true

	case "Site.smoId":
		if e.complexity.Site.SmoID == nil {
			break
		}

		return e.complexity.Site.SmoID(childComplexity), true

	case "Site.state":
		if e.complexity.Site.State == nil {
			break
		}

		return e.complexity.Site.State(childComplexity), true

	case "Site.status":
		if e.complexity.Site.Status == nil {
			break
		}

		return e.complexity.Site.Status(childComplexity), true

	case "Site.streetAddress":
		if e.complexity.Site.StreetAddress == nil {
			break
		}

		return e.complexity.Site.StreetAddress(childComplexity), true

	case "Site.studies":
		if e.complexity.Site.Studies == nil {
			break
		}

		return e.complexity.Site.Studies(childComplexity), true

	case "Site.studiesSummary":
		if e.complexity.Site.StudiesSummary == nil {
			break
		}

		return e.complexity.Site.StudiesSummary(childComplexity), true

	case "Site.subjectsCount":
		if e.complexity.Site.SubjectsCount == nil {
			break
		}

		return e.complexity.Site.SubjectsCount(childComplexity), true

	case "Site.suite":
		if e.complexity.Site.Suite == nil {
			break
		}

		return e.complexity.Site.Suite(childComplexity), true

	case "Site.tildaid":
		if e.complexity.Site.Tildaid == nil {
			break
		}

		return e.complexity.Site.Tildaid(childComplexity), true

	case "Site.timeZone":
		if e.complexity.Site.TimeZone == nil {
			break
		}

		return e.complexity.Site.TimeZone(childComplexity), true

	case "Site.twilioNumber":
		if e.complexity.Site.TwilioNumber == nil {
			break
		}

		return e.complexity.Site.TwilioNumber(childComplexity), true

	case "Site.updatedAt":
		if e.complexity.Site.UpdatedAt == nil {
			break
		}

		return e.complexity.Site.UpdatedAt(childComplexity), true

	case "Study.name":
		if e.complexity.Study.Name == nil {
			break
		}

		return e.complexity.Study.Name(childComplexity), true

	case "Study.numapproved":
		if e.complexity.Study.Numapproved == nil {
			break
		}

		return e.complexity.Study.Numapproved(childComplexity), true

	case "Study.numparticipants":
		if e.complexity.Study.Numparticipants == nil {
			break
		}

		return e.complexity.Study.Numparticipants(childComplexity), true

	case "Study.numpatients":
		if e.complexity.Study.Numpatients == nil {
			break
		}

		return e.complexity.Study.Numpatients(childComplexity), true

	case "Study.numpending":
		if e.complexity.Study.Numpending == nil {
			break
		}

		return e.complexity.Study.Numpending(childComplexity), true

	case "Study.numrejected":
		if e.complexity.Study.Numrejected == nil {
			break
		}

		return e.complexity.Study.Numrejected(childComplexity), true

	case "Study.status":
		if e.complexity.Study.Status == nil {
			break
		}

		return e.complexity.Study.Status(childComplexity), true

	case "Study.tildaid":
		if e.complexity.Study.Tildaid == nil {
			break
		}

		return e.complexity.Study.Tildaid(childComplexity), true

	case "StudyStatusCount.count":
		if e.complexity.StudyStatusCount.Count == nil {
			break
		}

		return e.complexity.StudyStatusCount.Count(childComplexity), true

	case "StudyStatusCount.status":
		if e.complexity.StudyStatusCount.Status == nil {
			break
		}

		return e.complexity.StudyStatusCount.Status(childComplexity), true

	case "User.bio":
		if e.complexity.User.Bio == nil {
			break
		}

		return e.complexity.User.Bio(childComplexity), true

	case "User.capabilities":
		if e.complexity.User.Capabilities == nil {
			break
		}

		return e.complexity.User.Capabilities(childComplexity), true

	case "User.contact":
		if e.complexity.User.Contact == nil {
			break
		}

		return e.complexity.User.Contact(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.location":
		if e.complexity.User.Location == nil {
			break
		}

		return e.complexity.User.Location(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.onboarded":
		if e.complexity.User.Onboarded == nil {
			break
		}

		return e.complexity.User.Onboarded(childComplexity), true

	case "User.orgMemberships":
		if e.complexity.User.OrgMemberships == nil {
			break
		}

		return e.complexity.User.OrgMemberships(childComplexity), true

	case "User.tildaid":
		if e.complexity.User.Tildaid == nil {
			break
		}

		return e.complexity.User.Tildaid(childComplexity), true

	case "User.username":
		if e.complexity.User.Username == nil {
			break
		}

		return e.complexity.User.Username(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputOrganizationUpdate,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../schema.graphqls", Input: `type Organization {
  tildaid: ID!
  alias: String
  name: String!
  url: String
  country: String
  state: String
  city: String
  postalCode: String
  email: String
  contactPhone: String
  bio: String
  orgType: OrgType!
  orgMemberships: [OrgMembership!]!
}

enum OrgType {
  SMO
  CRO
  Sponsor
}

type User {
  tildaid: ID!
  onboarded: Boolean!
  username: String!
  name: String
  email: String!
  contact: String
  bio: String
  capabilities: String
  location: String
  orgMemberships: [OrgMembership!]!
}

type OrgMembership {
  role: String!
  user: User!
  organization: Organization!
}

type Study {
  tildaid: ID!
  name: String!
  status: String!
  numapproved: Int!
  numparticipants: Int!
  numpatients: Int!
  numpending: Int!
  numrejected: Int!
}

type Site {
  tildaid: ID!
  name: String!
  address: String!
  capacity: String
  city: String!
  contactEmail: String
  contactPhone: String
  country: String!
  createdAt: Float!
  daysOfWeek: String
  description: String
  googleMapUrl: String
  holdBitmap: Int
  holidaysList: String
  latitude: Float
  longitude: Float
  orgId: ID!
  outstandingQueries: Int
  postalCode: String!
  primaryLocationId: ID
  siteLogo: String
  smoId: ID
  state: String!
  status: String!
  streetAddress: String!
  studiesSummary: [StudyStatusCount!]
  subjectsCount: Int
  suite: String
  timeZone: String
  twilioNumber: String
  updatedAt: Float!
  studies: [Study!]!
}

type StudyStatusCount {
  status: String!
  count: Int!
}

input OrganizationUpdate {
  name: String
  bio: String
  email: String
  alias: String
  url: String
  country: String
  state: String
  city: String
  postalCode: String
}

type Query {
  myProfile: User!
  organizations: [Organization!]!
  organization(id: ID!): Organization!
  studies: [Study!]!
  study(id: ID!): Study!
  sites: [Site!]!
}

type Mutation {
  updateOrganization(id: ID!, value: OrganizationUpdate!): Organization
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
